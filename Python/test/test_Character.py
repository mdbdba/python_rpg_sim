import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from PlayerCharacter import PlayerCharacter    # NOQA
from InvokePSQL import InvokePSQL    # NOQA
from CommonFunctions import array_to_string, string_to_array    # NOQA
from CommonFunctions import compare_arrays    # NOQA


def test_Character_Default():
    db = InvokePSQL()
    a1 = PlayerCharacter(db)
    assert(a1)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())
    assert(a1.blinded_ind is False)
    assert(a1.charmed_ind is False)
    assert(a1.deafened_ind is False)
    assert(a1.fatigued_ind is False)
    assert(a1.frightened_ind is False)
    assert(a1.grappled_ind is False)
    assert(a1.incapacitated_ind is False)
    assert(a1.invisible_ind is False)
    assert(a1.paralyzed_ind is False)
    assert(a1.petrified_ind is False)
    assert(a1.poisoned_ind is False)
    assert(a1.prone_ind is False)
    assert(a1.stunned_ind is False)
    assert(a1.unconcious_ind is False)
    assert(a1.exhaustion_level == 0)
    assert(a1.cur_movement > 10)


def test_Character_Strict():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, ability_array_str="strict")
    assert(a1)
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())


def test_Race_Standard_Array():
    db = InvokePSQL()
#    compArray = [15, 14, 13, 12, 10, 8]
    found15 = False
    found14 = False
    found13 = False
    found12 = False
    found10 = False
    found8 = False

    a1 = PlayerCharacter(db, ability_array_str="standard")
    assert(a1)
    tmp_array = a1.get_raw_ability_array()
    for i in range(0, 6):
        if tmp_array[i] == 15:
            found15 = True
        elif tmp_array[i] == 14:
            found14 = True
        elif tmp_array[i] == 13:
            found13 = True
        elif tmp_array[i] == 12:
            found12 = True
        elif tmp_array[i] == 10:
            found10 = True
        elif tmp_array[i] == 8:
            found8 = True

    assert(found15)
    assert(found14)
    assert(found13)
    assert(found12)
    assert(found10)
    assert(found8)
    # assert(compArray[i] == a1.ability_base_array[i])


def test_Character_Dwarf_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db,
                         race_candidate="Mountain dwarf",
                         class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Mountain dwarf")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())
    assert(a1.melee_weapon_obj.name == 'Greataxe')
    assert(a1.ranged_weapon_obj.name == 'Javelin')


def test_Character_Halfling_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db,
                         race_candidate="Stout halfling",
                         class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Stout halfling")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())
    assert(a1.melee_weapon_obj.name == 'Rapier')


def test_RandomGen_Retrieve():
    db = InvokePSQL()
    a1 = PlayerCharacter(db)
    b1 = PlayerCharacter(db, character_id=a1.character_id)
    assert(a1)
    assert(b1)
    assert(a1.level == b1.level)
    assert(a1.get_race() == b1.get_race())
    assert(a1.get_class() == b1.get_class())
    assert(a1.get_gender() == b1.get_gender())
    assert(a1.tta == b1.tta)
    assert(a1.get_name() == b1.get_name())
    assert(a1.armor_class == b1.armor_class)

    assert(compare_arrays(a1.get_raw_ability_array(), b1.get_raw_ability_array()))
    assert(compare_arrays(a1.get_ability_array(), b1.get_ability_array()))
    assert(compare_arrays(a1.ability_modifier_array, b1.ability_modifier_array))
    assert(compare_arrays(a1.ability_array_obj.ability_label_array,
                          b1.ability_array_obj.ability_label_array))

    assert(a1.hit_points == b1.hit_points)
    assert(a1.temp_hit_points == b1.temp_hit_points)
    assert(a1.cur_hit_points == b1.cur_hit_points)
    assert(a1.get_height() == b1.get_height())
    assert(a1.get_weight() == b1.get_weight())
    assert(a1.get_alignment_str() == b1.get_alignment_str())
    assert(a1.get_alignment_abbrev() == b1.get_alignment_abbrev())
    assert(a1.get_skin_tone() == b1.get_skin_tone())
    assert(a1.get_hair_color() == b1.get_hair_color())
    assert(a1.get_hair_type() == b1.get_hair_type())
    assert(a1.get_eye_color() == b1.get_eye_color())


def test_Character_Poison_Resistance():
    db = InvokePSQL()
    a1 = PlayerCharacter(db,
                         race_candidate="Mountain Dwarf",
                         class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Mountain dwarf")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.damage_adj['Poison'] == 'resistant')
    a1.damage(6, 'Poison')
    assert(a1.cur_hit_points == (a1.hit_points - 3))


def test_Character_Death():
    db = InvokePSQL()
    a1 = PlayerCharacter(db,
                         ability_array_str="18,12,12,10,10,8",
                         race_candidate="Mountain Dwarf",
                         class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Mountain dwarf")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    a1.melee_defend(modifier=13, possible_damage=a1.hit_points,
                    damage_type='Bludgeoning')

    assert(a1.alive is True)
    assert(a1.stabilized is False)
    a1.heal(10)
    assert(a1.cur_hit_points == 10)
    assert(a1.alive is True)
    assert(a1.stabilized is True)
    a1.melee_defend(modifier=13, possible_damage=(2 * a1.hit_points),
                    damage_type='Bludgeoning')
    assert(a1.alive is False)


def test_Character_Checks():
    db = InvokePSQL()
    a1 = PlayerCharacter(db,
                         ability_array_str="18,12,12,10,10,8",
                         race_candidate="Mountain Dwarf",
                         class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Mountain dwarf")
    assert(a1.get_class() == "Barbarian")
    assert(a1.finesse_ability_mod == 'Strength')
    assert(a1.class_obj.hit_die == 12)
    res = a1.check('Strength', 'Normal', 5)
    assert(res is True or res is False)
    res = a1.check('Strength', 'Advantage', 15)
    assert(res is True or res is False)
    res = a1.check('Strength', 'Disadvantage', 10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check('Dexterity', 'Normal', 5)
    assert(res is True or res is False)
    res = a1.check('Dexterity', 'Advantage', 15)
    assert(res is True or res is False)
    res = a1.check('Dexterity', 'Disadvantage', 10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check('Constitution', 'Normal', 5)
    assert(res is True or res is False)
    res = a1.check('Constitution', 'Advantage', 15)
    assert(res is True or res is False)
    res = a1.check('Constitution', 'Disadvantage', 10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check('Intelligence', 'Normal', 5)
    assert(res is True or res is False)
    res = a1.check('Intelligence', 'Advantage', 15)
    assert(res is True or res is False)
    res = a1.check('Intelligence', 'Disadvantage', 10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check('Wisdom', 'Normal', 5)
    assert(res is True or res is False)
    res = a1.check('Wisdom', 'Advantage', 15)
    assert(res is True or res is False)
    res = a1.check('Wisdom', 'Disadvantage', 10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check('Charisma', 'Normal', 5)
    assert(res is True or res is False)
    res = a1.check('Charisma', 'Advantage', 15)
    assert(res is True or res is False)
    res = a1.check('Charisma', 'Disadvantage', 10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check('Athletics', 'Normal', 5)
    assert(res is True or res is False)
    res = a1.check('Athletics', 'Advantage', 15)
    assert(res is True or res is False)
    res = a1.check('Athletics', 'Disadvantage', 10)
    assert(res is True or res is False)


def test_Character_Hilldwarf_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Hill dwarf", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Hill dwarf")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())


def test_Character_Highelf_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="High elf", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "High elf")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Woodelf_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Wood elf", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Wood elf")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Lightfoothalfling_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Lightfoot halfling", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Lightfoot halfling")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Stouthalfling_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Stout halfling", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Stout halfling")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfElf_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Elf", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Half-Elf")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Human_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Human", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Human")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackdragonborn_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black dragonborn", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Black dragonborn")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bluedragonborn_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Blue dragonborn", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Blue dragonborn")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brassdragonborn_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brass dragonborn", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Brass dragonborn")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bronzedragonborn_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Bronze dragonborn", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Bronze dragonborn")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Copperdragonborn_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Copper dragonborn", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Copper dragonborn")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Golddragonborn_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gold dragonborn", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Gold dragonborn")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greendragonborn_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Green dragonborn", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Green dragonborn")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Reddragonborn_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Red dragonborn", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Red dragonborn")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Silverdragonborn_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Silver dragonborn", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Silver dragonborn")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Whitedragonborn_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="White dragonborn", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "White dragonborn")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Rockgnome_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Rock gnome", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Rock gnome")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfOrc_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Orc", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Half-Orc")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Tiefling_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Tiefling", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Tiefling")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Centaur_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Centaur", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Centaur")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackbearkin_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black bearkin", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Black bearkin")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brownbearkin_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brown bearkin", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Brown bearkin")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Koalabearkin_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Koala bearkin", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Koala bearkin")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Pandabearkin_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Panda bearkin", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Panda bearkin")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Polarbearkin_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Polar bearkin", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Polar bearkin")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Burrowskobold_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Burrows kobold", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Burrows kobold")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Loredrakekobold_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Loredrake kobold", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Loredrake kobold")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Wingedkobold_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Winged kobold", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Winged kobold")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greenskingoblin_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Greenskin goblin", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Greenskin goblin")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Boggartgoblin_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Boggart goblin", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Boggart goblin")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Gremlingoblin_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gremlin goblin", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Gremlin goblin")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Dryad_Barbarian():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Dryad", class_candidate="Barbarian")
    assert(a1)
    assert(a1.get_race() == "Dryad")
    assert(a1.get_class() == "Barbarian")
    assert(a1.class_obj.hit_die == 12)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Hilldwarf_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Hill dwarf", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Hill dwarf")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Highelf_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="High elf", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "High elf")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Mountaindwarf_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Mountain dwarf", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Mountain dwarf")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Woodelf_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Wood elf", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Wood elf")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Lightfoothalfling_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Lightfoot halfling", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Lightfoot halfling")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())


def test_Character_HalfElf_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Elf", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Half-Elf")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Human_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Human", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Human")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackdragonborn_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black dragonborn", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Black dragonborn")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bluedragonborn_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Blue dragonborn", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Blue dragonborn")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brassdragonborn_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brass dragonborn", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Brass dragonborn")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bronzedragonborn_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Bronze dragonborn", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Bronze dragonborn")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Copperdragonborn_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Copper dragonborn", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Copper dragonborn")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Golddragonborn_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gold dragonborn", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Gold dragonborn")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greendragonborn_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Green dragonborn", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Green dragonborn")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Reddragonborn_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Red dragonborn", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Red dragonborn")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Silverdragonborn_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Silver dragonborn", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Silver dragonborn")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Whitedragonborn_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="White dragonborn", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "White dragonborn")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Rockgnome_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Rock gnome", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Rock gnome")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfOrc_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Orc", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Half-Orc")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Tiefling_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Tiefling", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Tiefling")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Centaur_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Centaur", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Centaur")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackbearkin_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black bearkin", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Black bearkin")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brownbearkin_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brown bearkin", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Brown bearkin")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Koalabearkin_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Koala bearkin", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Koala bearkin")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Pandabearkin_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Panda bearkin", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Panda bearkin")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Polarbearkin_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Polar bearkin", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Polar bearkin")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Burrowskobold_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Burrows kobold", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Burrows kobold")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Loredrakekobold_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Loredrake kobold", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Loredrake kobold")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Wingedkobold_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Winged kobold", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Winged kobold")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greenskingoblin_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Greenskin goblin", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Greenskin goblin")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Boggartgoblin_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Boggart goblin", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Boggart goblin")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Gremlingoblin_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gremlin goblin", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Gremlin goblin")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Dryad_Bard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Dryad", class_candidate="Bard")
    assert(a1)
    assert(a1.get_race() == "Dryad")
    assert(a1.get_class() == "Bard")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Hilldwarf_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Hill dwarf", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Hill dwarf")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Highelf_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="High elf", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "High elf")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Mountaindwarf_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Mountain dwarf", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Mountain dwarf")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Woodelf_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Wood elf", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Wood elf")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Lightfoothalfling_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Lightfoot halfling", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Lightfoot halfling")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Stouthalfling_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Stout halfling", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Stout halfling")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfElf_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Elf", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Half-Elf")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Human_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Human", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Human")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackdragonborn_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black dragonborn", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Black dragonborn")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bluedragonborn_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Blue dragonborn", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Blue dragonborn")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brassdragonborn_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brass dragonborn", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Brass dragonborn")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bronzedragonborn_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Bronze dragonborn", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Bronze dragonborn")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Copperdragonborn_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Copper dragonborn", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Copper dragonborn")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Golddragonborn_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gold dragonborn", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Gold dragonborn")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greendragonborn_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Green dragonborn", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Green dragonborn")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Reddragonborn_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Red dragonborn", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Red dragonborn")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Silverdragonborn_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Silver dragonborn", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Silver dragonborn")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Whitedragonborn_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="White dragonborn", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "White dragonborn")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Rockgnome_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Rock gnome", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Rock gnome")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfOrc_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Orc", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Half-Orc")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Tiefling_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Tiefling", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Tiefling")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Centaur_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Centaur", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Centaur")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackbearkin_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black bearkin", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Black bearkin")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brownbearkin_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brown bearkin", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Brown bearkin")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Koalabearkin_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Koala bearkin", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Koala bearkin")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Pandabearkin_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Panda bearkin", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Panda bearkin")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Polarbearkin_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Polar bearkin", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Polar bearkin")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Burrowskobold_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Burrows kobold", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Burrows kobold")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Loredrakekobold_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Loredrake kobold", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Loredrake kobold")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Wingedkobold_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Winged kobold", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Winged kobold")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greenskingoblin_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Greenskin goblin", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Greenskin goblin")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Boggartgoblin_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Boggart goblin", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Boggart goblin")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Gremlingoblin_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gremlin goblin", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Gremlin goblin")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Dryad_Cleric():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Dryad", class_candidate="Cleric")
    assert(a1)
    assert(a1.get_race() == "Dryad")
    assert(a1.get_class() == "Cleric")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Hilldwarf_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Hill dwarf", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Hill dwarf")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Highelf_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="High elf", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "High elf")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Mountaindwarf_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Mountain dwarf", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Mountain dwarf")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Woodelf_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Wood elf", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Wood elf")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Lightfoothalfling_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Lightfoot halfling", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Lightfoot halfling")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Stouthalfling_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Stout halfling", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Stout halfling")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfElf_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Elf", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Half-Elf")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Human_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Human", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Human")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackdragonborn_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black dragonborn", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Black dragonborn")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bluedragonborn_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Blue dragonborn", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Blue dragonborn")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brassdragonborn_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brass dragonborn", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Brass dragonborn")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bronzedragonborn_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Bronze dragonborn", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Bronze dragonborn")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Copperdragonborn_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Copper dragonborn", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Copper dragonborn")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Golddragonborn_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gold dragonborn", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Gold dragonborn")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greendragonborn_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Green dragonborn", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Green dragonborn")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Reddragonborn_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Red dragonborn", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Red dragonborn")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Silverdragonborn_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Silver dragonborn", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Silver dragonborn")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Whitedragonborn_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="White dragonborn", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "White dragonborn")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Rockgnome_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Rock gnome", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Rock gnome")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfOrc_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Orc", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Half-Orc")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Tiefling_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Tiefling", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Tiefling")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Centaur_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Centaur", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Centaur")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackbearkin_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black bearkin", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Black bearkin")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brownbearkin_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brown bearkin", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Brown bearkin")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Koalabearkin_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Koala bearkin", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Koala bearkin")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Pandabearkin_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Panda bearkin", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Panda bearkin")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Polarbearkin_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Polar bearkin", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Polar bearkin")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Burrowskobold_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Burrows kobold", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Burrows kobold")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Loredrakekobold_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Loredrake kobold", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Loredrake kobold")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Wingedkobold_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Winged kobold", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Winged kobold")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greenskingoblin_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Greenskin goblin", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Greenskin goblin")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Boggartgoblin_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Boggart goblin", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Boggart goblin")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Gremlingoblin_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gremlin goblin", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Gremlin goblin")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Dryad_Druid():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Dryad", class_candidate="Druid")
    assert(a1)
    assert(a1.get_race() == "Dryad")
    assert(a1.get_class() == "Druid")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Hilldwarf_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Hill dwarf", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Hill dwarf")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Highelf_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="High elf", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "High elf")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Mountaindwarf_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Mountain dwarf", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Mountain dwarf")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Woodelf_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Wood elf", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Wood elf")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Lightfoothalfling_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Lightfoot halfling", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Lightfoot halfling")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Stouthalfling_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Stout halfling", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Stout halfling")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfElf_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Elf", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Half-Elf")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Human_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Human", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Human")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackdragonborn_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black dragonborn", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Black dragonborn")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bluedragonborn_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Blue dragonborn", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Blue dragonborn")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brassdragonborn_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brass dragonborn", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Brass dragonborn")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bronzedragonborn_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Bronze dragonborn", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Bronze dragonborn")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Copperdragonborn_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Copper dragonborn", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Copper dragonborn")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Golddragonborn_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gold dragonborn", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Gold dragonborn")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greendragonborn_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Green dragonborn", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Green dragonborn")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Reddragonborn_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Red dragonborn", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Red dragonborn")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Silverdragonborn_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Silver dragonborn", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Silver dragonborn")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Whitedragonborn_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="White dragonborn", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "White dragonborn")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Rockgnome_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Rock gnome", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Rock gnome")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfOrc_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Orc", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Half-Orc")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Tiefling_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Tiefling", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Tiefling")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Centaur_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Centaur", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Centaur")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackbearkin_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black bearkin", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Black bearkin")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brownbearkin_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brown bearkin", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Brown bearkin")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Koalabearkin_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Koala bearkin", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Koala bearkin")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Pandabearkin_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Panda bearkin", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Panda bearkin")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Polarbearkin_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Polar bearkin", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Polar bearkin")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Burrowskobold_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Burrows kobold", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Burrows kobold")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Loredrakekobold_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Loredrake kobold", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Loredrake kobold")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Wingedkobold_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Winged kobold", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Winged kobold")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greenskingoblin_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Greenskin goblin", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Greenskin goblin")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Boggartgoblin_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Boggart goblin", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Boggart goblin")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Gremlingoblin_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gremlin goblin", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Gremlin goblin")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Dryad_Fighter():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Dryad", class_candidate="Fighter")
    assert(a1)
    assert(a1.get_race() == "Dryad")
    assert(a1.get_class() == "Fighter")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Hilldwarf_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Hill dwarf", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Hill dwarf")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Highelf_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="High elf", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "High elf")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Mountaindwarf_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Mountain dwarf", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Mountain dwarf")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Woodelf_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Wood elf", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Wood elf")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Lightfoothalfling_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Lightfoot halfling", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Lightfoot halfling")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Stouthalfling_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Stout halfling", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Stout halfling")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfElf_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Elf", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Half-Elf")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Human_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Human", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Human")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackdragonborn_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black dragonborn", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Black dragonborn")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bluedragonborn_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Blue dragonborn", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Blue dragonborn")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brassdragonborn_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brass dragonborn", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Brass dragonborn")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bronzedragonborn_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Bronze dragonborn", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Bronze dragonborn")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Copperdragonborn_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Copper dragonborn", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Copper dragonborn")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Golddragonborn_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gold dragonborn", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Gold dragonborn")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greendragonborn_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Green dragonborn", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Green dragonborn")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Reddragonborn_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Red dragonborn", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Red dragonborn")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Silverdragonborn_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Silver dragonborn", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Silver dragonborn")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Whitedragonborn_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="White dragonborn", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "White dragonborn")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Rockgnome_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Rock gnome", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Rock gnome")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfOrc_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Orc", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Half-Orc")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Tiefling_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Tiefling", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Tiefling")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Centaur_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Centaur", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Centaur")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackbearkin_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black bearkin", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Black bearkin")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brownbearkin_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brown bearkin", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Brown bearkin")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Koalabearkin_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Koala bearkin", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Koala bearkin")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Pandabearkin_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Panda bearkin", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Panda bearkin")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Polarbearkin_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Polar bearkin", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Polar bearkin")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Burrowskobold_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Burrows kobold", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Burrows kobold")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Loredrakekobold_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Loredrake kobold", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Loredrake kobold")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Wingedkobold_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Winged kobold", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Winged kobold")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greenskingoblin_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Greenskin goblin", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Greenskin goblin")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Boggartgoblin_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Boggart goblin", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Boggart goblin")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Gremlingoblin_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gremlin goblin", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Gremlin goblin")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Dryad_Monk():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Dryad", class_candidate="Monk")
    assert(a1)
    assert(a1.get_race() == "Dryad")
    assert(a1.get_class() == "Monk")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Hilldwarf_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Hill dwarf", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Hill dwarf")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Highelf_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="High elf", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "High elf")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Mountaindwarf_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Mountain dwarf", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Mountain dwarf")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Woodelf_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Wood elf", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Wood elf")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Lightfoothalfling_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Lightfoot halfling", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Lightfoot halfling")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Stouthalfling_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Stout halfling", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Stout halfling")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfElf_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Elf", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Half-Elf")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Human_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Human", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Human")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackdragonborn_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black dragonborn", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Black dragonborn")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bluedragonborn_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Blue dragonborn", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Blue dragonborn")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brassdragonborn_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brass dragonborn", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Brass dragonborn")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bronzedragonborn_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Bronze dragonborn", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Bronze dragonborn")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Copperdragonborn_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Copper dragonborn", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Copper dragonborn")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Golddragonborn_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gold dragonborn", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Gold dragonborn")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greendragonborn_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Green dragonborn", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Green dragonborn")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Reddragonborn_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Red dragonborn", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Red dragonborn")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Silverdragonborn_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Silver dragonborn", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Silver dragonborn")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Whitedragonborn_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="White dragonborn", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "White dragonborn")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Rockgnome_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Rock gnome", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Rock gnome")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfOrc_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Orc", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Half-Orc")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Tiefling_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Tiefling", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Tiefling")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Centaur_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Centaur", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Centaur")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackbearkin_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black bearkin", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Black bearkin")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brownbearkin_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brown bearkin", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Brown bearkin")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Koalabearkin_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Koala bearkin", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Koala bearkin")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Pandabearkin_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Panda bearkin", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Panda bearkin")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Polarbearkin_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Polar bearkin", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Polar bearkin")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Burrowskobold_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Burrows kobold", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Burrows kobold")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Loredrakekobold_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Loredrake kobold", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Loredrake kobold")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Wingedkobold_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Winged kobold", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Winged kobold")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greenskingoblin_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Greenskin goblin", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Greenskin goblin")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Boggartgoblin_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Boggart goblin", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Boggart goblin")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Gremlingoblin_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gremlin goblin", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Gremlin goblin")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Dryad_Paladin():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Dryad", class_candidate="Paladin")
    assert(a1)
    assert(a1.get_race() == "Dryad")
    assert(a1.get_class() == "Paladin")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Hilldwarf_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Hill dwarf", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Hill dwarf")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Highelf_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="High elf", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "High elf")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Mountaindwarf_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Mountain dwarf", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Mountain dwarf")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Woodelf_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Wood elf", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Wood elf")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Lightfoothalfling_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Lightfoot halfling", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Lightfoot halfling")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Stouthalfling_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Stout halfling", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Stout halfling")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfElf_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Elf", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Half-Elf")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Human_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Human", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Human")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackdragonborn_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black dragonborn", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Black dragonborn")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bluedragonborn_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Blue dragonborn", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Blue dragonborn")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brassdragonborn_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brass dragonborn", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Brass dragonborn")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bronzedragonborn_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Bronze dragonborn", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Bronze dragonborn")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Copperdragonborn_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Copper dragonborn", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Copper dragonborn")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Golddragonborn_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gold dragonborn", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Gold dragonborn")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greendragonborn_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Green dragonborn", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Green dragonborn")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Reddragonborn_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Red dragonborn", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Red dragonborn")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Silverdragonborn_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Silver dragonborn", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Silver dragonborn")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Whitedragonborn_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="White dragonborn", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "White dragonborn")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Rockgnome_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Rock gnome", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Rock gnome")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfOrc_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Orc", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Half-Orc")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Tiefling_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Tiefling", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Tiefling")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Centaur_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Centaur", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Centaur")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackbearkin_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black bearkin", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Black bearkin")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brownbearkin_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brown bearkin", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Brown bearkin")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Koalabearkin_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Koala bearkin", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Koala bearkin")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Pandabearkin_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Panda bearkin", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Panda bearkin")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Polarbearkin_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Polar bearkin", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Polar bearkin")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Burrowskobold_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Burrows kobold", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Burrows kobold")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Loredrakekobold_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Loredrake kobold", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Loredrake kobold")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Wingedkobold_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Winged kobold", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Winged kobold")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greenskingoblin_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Greenskin goblin", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Greenskin goblin")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Boggartgoblin_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Boggart goblin", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Boggart goblin")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Gremlingoblin_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gremlin goblin", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Gremlin goblin")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Dryad_Ranger():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Dryad", class_candidate="Ranger")
    assert(a1)
    assert(a1.get_race() == "Dryad")
    assert(a1.get_class() == "Ranger")
    assert(a1.class_obj.hit_die == 10)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Hilldwarf_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Hill dwarf", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Hill dwarf")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Highelf_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="High elf", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "High elf")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Mountaindwarf_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Mountain dwarf", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Mountain dwarf")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Woodelf_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Wood elf", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Wood elf")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Lightfoothalfling_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Lightfoot halfling", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Lightfoot halfling")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Stouthalfling_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Stout halfling", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Stout halfling")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfElf_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Elf", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Half-Elf")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Human_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Human", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Human")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackdragonborn_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black dragonborn", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Black dragonborn")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bluedragonborn_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Blue dragonborn", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Blue dragonborn")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brassdragonborn_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brass dragonborn", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Brass dragonborn")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bronzedragonborn_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Bronze dragonborn", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Bronze dragonborn")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Copperdragonborn_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Copper dragonborn", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Copper dragonborn")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Golddragonborn_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gold dragonborn", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Gold dragonborn")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greendragonborn_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Green dragonborn", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Green dragonborn")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Reddragonborn_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Red dragonborn", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Red dragonborn")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Silverdragonborn_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Silver dragonborn", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Silver dragonborn")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Whitedragonborn_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="White dragonborn", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "White dragonborn")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Rockgnome_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Rock gnome", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Rock gnome")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfOrc_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Orc", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Half-Orc")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Tiefling_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Tiefling", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Tiefling")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Centaur_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Centaur", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Centaur")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackbearkin_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black bearkin", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Black bearkin")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brownbearkin_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brown bearkin", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Brown bearkin")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Koalabearkin_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Koala bearkin", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Koala bearkin")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Pandabearkin_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Panda bearkin", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Panda bearkin")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Polarbearkin_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Polar bearkin", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Polar bearkin")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Burrowskobold_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Burrows kobold", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Burrows kobold")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Loredrakekobold_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Loredrake kobold", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Loredrake kobold")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Wingedkobold_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Winged kobold", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Winged kobold")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greenskingoblin_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Greenskin goblin", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Greenskin goblin")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Boggartgoblin_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Boggart goblin", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Boggart goblin")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Gremlingoblin_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gremlin goblin", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Gremlin goblin")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Dryad_Rogue():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Dryad", class_candidate="Rogue")
    assert(a1)
    assert(a1.get_race() == "Dryad")
    assert(a1.get_class() == "Rogue")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Hilldwarf_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Hill dwarf", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Hill dwarf")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Highelf_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="High elf", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "High elf")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Mountaindwarf_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Mountain dwarf", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Mountain dwarf")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Woodelf_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Wood elf", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Wood elf")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Lightfoothalfling_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Lightfoot halfling", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Lightfoot halfling")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Stouthalfling_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Stout halfling", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Stout halfling")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfElf_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Elf", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Half-Elf")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Human_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Human", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Human")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackdragonborn_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black dragonborn", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Black dragonborn")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bluedragonborn_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Blue dragonborn", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Blue dragonborn")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brassdragonborn_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brass dragonborn", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Brass dragonborn")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bronzedragonborn_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Bronze dragonborn", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Bronze dragonborn")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Copperdragonborn_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Copper dragonborn", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Copper dragonborn")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Golddragonborn_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gold dragonborn", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Gold dragonborn")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greendragonborn_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Green dragonborn", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Green dragonborn")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Reddragonborn_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Red dragonborn", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Red dragonborn")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Silverdragonborn_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Silver dragonborn", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Silver dragonborn")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Whitedragonborn_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="White dragonborn", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "White dragonborn")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Rockgnome_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Rock gnome", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Rock gnome")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfOrc_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Orc", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Half-Orc")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Tiefling_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Tiefling", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Tiefling")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Centaur_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Centaur", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Centaur")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackbearkin_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black bearkin", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Black bearkin")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brownbearkin_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brown bearkin", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Brown bearkin")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Koalabearkin_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Koala bearkin", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Koala bearkin")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Pandabearkin_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Panda bearkin", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Panda bearkin")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Polarbearkin_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Polar bearkin", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Polar bearkin")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Burrowskobold_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Burrows kobold", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Burrows kobold")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Loredrakekobold_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Loredrake kobold", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Loredrake kobold")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Wingedkobold_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Winged kobold", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Winged kobold")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greenskingoblin_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Greenskin goblin", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Greenskin goblin")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Boggartgoblin_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Boggart goblin", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Boggart goblin")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Gremlingoblin_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gremlin goblin", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Gremlin goblin")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Dryad_Sorcerer():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Dryad", class_candidate="Sorcerer")
    assert(a1)
    assert(a1.get_race() == "Dryad")
    assert(a1.get_class() == "Sorcerer")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Hilldwarf_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Hill dwarf", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Hill dwarf")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Highelf_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="High elf", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "High elf")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Mountaindwarf_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Mountain dwarf", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Mountain dwarf")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Woodelf_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Wood elf", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Wood elf")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Lightfoothalfling_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Lightfoot halfling", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Lightfoot halfling")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Stouthalfling_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Stout halfling", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Stout halfling")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfElf_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Elf", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Half-Elf")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Human_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Human", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Human")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackdragonborn_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black dragonborn", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Black dragonborn")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bluedragonborn_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Blue dragonborn", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Blue dragonborn")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brassdragonborn_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brass dragonborn", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Brass dragonborn")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bronzedragonborn_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Bronze dragonborn", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Bronze dragonborn")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Copperdragonborn_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Copper dragonborn", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Copper dragonborn")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Golddragonborn_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gold dragonborn", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Gold dragonborn")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greendragonborn_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Green dragonborn", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Green dragonborn")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Reddragonborn_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Red dragonborn", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Red dragonborn")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Silverdragonborn_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Silver dragonborn", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Silver dragonborn")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Whitedragonborn_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="White dragonborn", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "White dragonborn")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Rockgnome_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Rock gnome", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Rock gnome")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfOrc_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Orc", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Half-Orc")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Tiefling_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Tiefling", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Tiefling")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Centaur_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Centaur", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Centaur")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackbearkin_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black bearkin", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Black bearkin")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brownbearkin_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brown bearkin", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Brown bearkin")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Koalabearkin_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Koala bearkin", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Koala bearkin")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Pandabearkin_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Panda bearkin", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Panda bearkin")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Polarbearkin_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Polar bearkin", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Polar bearkin")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Burrowskobold_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Burrows kobold", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Burrows kobold")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Loredrakekobold_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Loredrake kobold", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Loredrake kobold")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Wingedkobold_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Winged kobold", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Winged kobold")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greenskingoblin_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Greenskin goblin", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Greenskin goblin")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Boggartgoblin_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Boggart goblin", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Boggart goblin")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Gremlingoblin_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gremlin goblin", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Gremlin goblin")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Dryad_Warlock():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Dryad", class_candidate="Warlock")
    assert(a1)
    assert(a1.get_race() == "Dryad")
    assert(a1.get_class() == "Warlock")
    assert(a1.class_obj.hit_die == 8)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Hilldwarf_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Hill dwarf", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Hill dwarf")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Highelf_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="High elf", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "High elf")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Mountaindwarf_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Mountain dwarf", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Mountain dwarf")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Woodelf_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Wood elf", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Wood elf")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Lightfoothalfling_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Lightfoot halfling", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Lightfoot halfling")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Stouthalfling_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Stout halfling", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Stout halfling")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfElf_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Elf", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Half-Elf")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Human_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Human", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Human")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackdragonborn_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black dragonborn", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Black dragonborn")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bluedragonborn_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Blue dragonborn", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Blue dragonborn")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brassdragonborn_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brass dragonborn", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Brass dragonborn")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Bronzedragonborn_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Bronze dragonborn", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Bronze dragonborn")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Copperdragonborn_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Copper dragonborn", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Copper dragonborn")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Golddragonborn_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gold dragonborn", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Gold dragonborn")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greendragonborn_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Green dragonborn", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Green dragonborn")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Reddragonborn_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Red dragonborn", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Red dragonborn")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Silverdragonborn_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Silver dragonborn", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Silver dragonborn")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Whitedragonborn_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="White dragonborn", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "White dragonborn")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Rockgnome_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Rock gnome", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Rock gnome")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_HalfOrc_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Half-Orc", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Half-Orc")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Tiefling_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Tiefling", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Tiefling")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Centaur_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Centaur", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Centaur")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Blackbearkin_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Black bearkin", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Black bearkin")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Brownbearkin_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Brown bearkin", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Brown bearkin")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Koalabearkin_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Koala bearkin", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Koala bearkin")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Pandabearkin_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Panda bearkin", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Panda bearkin")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Polarbearkin_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Polar bearkin", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Polar bearkin")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Burrowskobold_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Burrows kobold", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Burrows kobold")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Loredrakekobold_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Loredrake kobold", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Loredrake kobold")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Wingedkobold_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Winged kobold", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Winged kobold")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Greenskingoblin_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Greenskin goblin", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Greenskin goblin")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Boggartgoblin_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Boggart goblin", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Boggart goblin")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Gremlingoblin_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Gremlin goblin", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Gremlin goblin")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

def test_Character_Dryad_Wizard():
    db = InvokePSQL()
    a1 = PlayerCharacter(db, race_candidate="Dryad", class_candidate="Wizard")
    assert(a1)
    assert(a1.get_race() == "Dryad")
    assert(a1.get_class() == "Wizard")
    assert(a1.class_obj.hit_die == 6)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_height())
    assert(a1.get_weight())
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.get_skin_tone())
    assert(a1.get_hair_color())
    assert(a1.get_hair_type())
    assert(a1.get_eye_color())

