import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from Foe import Foe    # NOQA
from InvokePSQL import InvokePSQL    # NOQA
from CommonFunctions import arrayToString, stringToArray    # NOQA
from CommonFunctions import compareArrays    # NOQA


def test_Foe_Default():
    db = InvokePSQL()
    a1 = Foe(db)
    assert(a1)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev())
    assert(a1.blinded_ind is False)
    assert(a1.charmed_ind is False)
    assert(a1.deafened_ind is False)
    assert(a1.fatigued_ind is False)
    assert(a1.frightened_ind is False)
    assert(a1.grappled_ind is False)
    assert(a1.incapacitated_ind is False)
    assert(a1.invisible_ind is False)
    assert(a1.paralyzed_ind is False)
    assert(a1.petrified_ind is False)
    assert(a1.poisoned_ind is False)
    assert(a1.prone_ind is False)
    assert(a1.stunned_ind is False)
    assert(a1.unconcious_ind is False)
    assert(a1.alive is True)
    assert(a1.stabilized is True)
    assert(a1.exhaustion_level == 0)
    assert(a1.cur_movement > 10)


def test_Foe_Skeleton():
    db = InvokePSQL()
    a1 = Foe(db, foe_candidate='Skeleton', debug_ind=1)
    assert(a1)
    assert(a1.get_name() == 'Skeleton')
    assert(a1.foe_type == "Undead")
    assert(arrayToString(a1.get_raw_ability_array()) == "10,14,15,6,8,5")
    assert(arrayToString(a1.get_ability_array()) == "10,14,15,6,8,5")
    assert(a1.level == 1)
    assert(a1.challenge_level == .25)
    assert(a1.get_alignment_str() == 'Lawful evil')
    assert(a1.get_alignment_abbrev() == 'LE')
    assert(a1.hit_points == 20)
    assert(a1.ranged_weapon == "Shortbow")
    assert(a1.melee_weapon == "Shortsword")
    assert(a1.ranged_ammunition_type == "Arrow")
    assert(a1.ranged_ammunition_amt == 20)
    assert(a1.armor == "Scraps")
    assert(a1.source_material == "SRD5")
    assert(a1.cur_movement == 30)


def test_Foe_Gnoll():
    db = InvokePSQL()
    a1 = Foe(db, foe_candidate='Gnoll', debug_ind=1)
    assert(a1)
    assert(a1.get_name() == 'Gnoll')
    assert(a1.foe_type == "Humanoid")
    assert(arrayToString(a1.get_raw_ability_array()) == "14,12,11,6,10,7")
    assert(arrayToString(a1.get_ability_array()) == "14,12,11,6,10,7")
    assert(a1.level == 1)
    assert(a1.challenge_level == .50)
    assert(a1.get_alignment_str() == 'Chaotic evil')
    assert(a1.get_alignment_abbrev() == 'CE')
    assert(a1.hit_points == 40)
    assert(a1.ranged_weapon == "Longbow")
    assert(a1.melee_weapon == "Spear")
    assert(a1.ranged_ammunition_type == "Arrow")
    assert(a1.ranged_ammunition_amt == 20)
    assert(a1.armor == "Hide")
    assert(a1.source_material == "SRD5")
    assert(a1.cur_movement == 30)


def test_Foe_Gnoll_Death():
    db = InvokePSQL()
    a1 = Foe(db, foe_candidate='Gnoll', debug_ind=1)
    assert(a1)
    assert(a1.get_name() == 'Gnoll')
    a1.melee_defend(modifier=15, possible_damage=a1.hit_points,
                    damage_type='Bludgeoning')

    assert(a1.alive is True)
    assert(a1.stabilized is False)
    a1.heal(10)
    assert(a1.cur_hit_points == 10)
    assert(a1.alive is True)
    assert(a1.stabilized is True)
    a1.melee_defend(modifier=15, possible_damage=(2 * a1.hit_points),
                    damage_type='Bludgeoning')
    assert(a1.alive is False)
    assert(a1.stabilized is False)

def test_Character_Checks():
    db = InvokePSQL()
    a1 = Foe(db, foe_candidate='Skeleton', debug_ind=1)
    assert(a1)
    assert(a1.get_name() == "Skeleton")
    res = a1.check('Strength', 'Normal', 5)
    assert(res is True or res is False)
    res = a1.check('Strength', 'Advantage', 15)
    assert(res is True or res is False)
    res = a1.check('Strength', 'Disadvantage', 10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check('Dexterity', 'Normal', 5)
    assert(res is True or res is False)
    res = a1.check('Dexterity', 'Advantage', 15)
    assert(res is True or res is False)
    res = a1.check('Dexterity', 'Disadvantage', 10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check('Constitution', 'Normal', 5)
    assert(res is True or res is False)
    res = a1.check('Constitution', 'Advantage', 15)
    assert(res is True or res is False)
    res = a1.check('Constitution', 'Disadvantage', 10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check('Intelligence', 'Normal', 5)
    assert(res is True or res is False)
    res = a1.check('Intelligence', 'Advantage', 15)
    assert(res is True or res is False)
    res = a1.check('Intelligence', 'Disadvantage', 10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check('Wisdom', 'Normal', 5)
    assert(res is True or res is False)
    res = a1.check('Wisdom', 'Advantage', 15)
    assert(res is True or res is False)
    res = a1.check('Wisdom', 'Disadvantage', 10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check('Charisma', 'Normal', 5)
    assert(res is True or res is False)
    res = a1.check('Charisma', 'Advantage', 15)
    assert(res is True or res is False)
    res = a1.check('Charisma', 'Disadvantage', 10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check('Athletics', 'Normal', 5)
    assert(res is True or res is False)
    res = a1.check('Athletics', 'Advantage', 15)
    assert(res is True or res is False)
    res = a1.check('Athletics', 'Disadvantage', 10)
    assert(res is True or res is False)
