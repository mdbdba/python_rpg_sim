import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from Foe import Foe    # NOQA
from InvokePSQL import InvokePSQL    # NOQA
from CommonFunctions import array_to_string, string_to_array    # NOQA
from CommonFunctions import compare_arrays    # NOQA
from Ctx import Ctx


def test_Foe_Default():
    db = InvokePSQL()
    ctx = Ctx(app_username='foe_init', logger_name="test_logger")
    a1 = Foe(db=db, ctx=ctx)
    assert(a1)
    assert(a1.get_name())
    assert(a1.get_raw_ability_array())
    assert(a1.get_ability_array())
    assert(a1.level)
    assert(a1.get_alignment_str())
    assert(a1.get_alignment_abbrev(ctx=ctx))
    assert(a1.blinded_ind is False)
    assert(a1.charmed_ind is False)
    assert(a1.deafened_ind is False)
    assert(a1.fatigued_ind is False)
    assert(a1.frightened_ind is False)
    assert(a1.grappled_ind is False)
    assert(a1.incapacitated_ind is False)
    assert(a1.invisible_ind is False)
    assert(a1.paralyzed_ind is False)
    assert(a1.petrified_ind is False)
    assert(a1.poisoned_ind is False)
    assert(a1.prone_ind is False)
    assert(a1.stunned_ind is False)
    assert(a1.unconscious_ind is False)
    assert(a1.alive is True)
    assert(a1.stabilized is True)
    assert(a1.exhaustion_level == 0)
    assert(a1.cur_movement > 10)


def test_Foe_Skeleton():
    db = InvokePSQL()
    ctx = Ctx(app_username='foe_init', logger_name="test_logger")
    a1 = Foe(db=db, ctx=ctx, foe_candidate='Skeleton', debug_ind=1)
    assert(a1)
    assert(a1.get_name() == 'Skeleton')
    assert(a1.foe_type == "Undead")
    assert(array_to_string(a1.get_raw_ability_array()) == "10,14,15,6,8,5")
    assert(array_to_string(a1.get_ability_array()) == "10,14,15,6,8,5")
    assert(a1.level == 1)
    assert(a1.challenge_level == .25)
    assert(a1.get_alignment_str() == 'Lawful evil')
    assert(a1.get_alignment_abbrev(ctx=ctx) == 'LE')
    assert(a1.hit_points == 20)
    assert(a1.ranged_weapon == "Shortbow")
    assert(a1.melee_weapon == "Shortsword")
    assert(a1.ranged_ammunition_type == "Arrow")
    assert(a1.ranged_ammunition_amt == 20)
    assert(a1.armor == "Scraps")
    assert(a1.source_material == "SRD5")
    assert(a1.cur_movement == 30)


def test_Foe_Gnoll():
    db = InvokePSQL()
    ctx = Ctx(app_username='character_class_init', logger_name="test_logger")
    a1 = Foe(db=db, ctx=ctx, foe_candidate='Gnoll', debug_ind=1)
    assert(a1)
    assert(a1.get_name() == 'Gnoll')
    assert(a1.foe_type == "Humanoid")
    assert(array_to_string(a1.get_raw_ability_array()) == "14,12,11,6,10,7")
    assert(array_to_string(a1.get_ability_array()) == "14,12,11,6,10,7")
    assert(a1.level == 1)
    assert(a1.challenge_level == .50)
    assert(a1.get_alignment_str() == 'Chaotic evil')
    assert(a1.get_alignment_abbrev(ctx=ctx) == 'CE')
    assert(a1.hit_points == 40)
    assert(a1.ranged_weapon == "Longbow")
    assert(a1.melee_weapon == "Spear")
    assert(a1.ranged_ammunition_type == "Arrow")
    assert(a1.ranged_ammunition_amt == 20)
    assert(a1.armor == "Hide")
    assert(a1.source_material == "SRD5")
    assert(a1.cur_movement == 30)


def test_Foe_Gnoll_Death():
    db = InvokePSQL()
    ctx = Ctx(app_username='character_class_init', logger_name="test_logger")
    a1 = Foe(db=db, ctx=ctx, foe_candidate='Gnoll', debug_ind=1)
    assert(a1)
    assert(a1.get_name() == 'Gnoll')
    a1.melee_defend(ctx=ctx, modifier=15, possible_damage=a1.hit_points,
                    damage_type='Bludgeoning')

    assert(a1.alive is True)
    assert(a1.stabilized is False)
    a1.heal(ctx=ctx, amount=10)
    assert(a1.cur_hit_points == 11)
    assert(a1.alive is True)
    assert(a1.stabilized is True)
    a1.melee_defend(ctx=ctx, modifier=15, possible_damage=(2 * a1.hit_points),
                    damage_type='Bludgeoning')
    assert(a1.alive is False)
    assert(a1.stabilized is False)

def test_Character_Checks():
    db = InvokePSQL()
    ctx = Ctx(app_username='character_class_init', logger_name="test_logger")
    a1 = Foe(db=db, ctx=ctx, foe_candidate='Skeleton', debug_ind=1)
    assert(a1)
    assert(a1.get_name() == "Skeleton")
    res = a1.check(ctx=ctx, skill='Strength', vantage='Normal', dc=5)
    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Strength', vantage='Advantage', dc=15)
    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Strength', vantage='Disadvantage', dc=10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Dexterity', vantage='Normal', dc=5)
    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Dexterity', vantage='Advantage', dc=15)
    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Dexterity', vantage='Disadvantage', dc=10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Constitution', vantage='Normal', dc=5)
    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Constitution', vantage='Advantage', dc=15)
    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Constitution', vantage='Disadvantage', dc=10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Intelligence', vantage='Normal', dc=5)
    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Intelligence', vantage='Advantage', dc=15)
    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Intelligence', vantage='Disadvantage', dc=10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Wisdom', vantage='Normal', dc=5)
    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Wisdom', vantage='Advantage', dc=15)
    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Wisdom', vantage='Disadvantage', dc=10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Charisma', vantage='Normal', dc=5)
    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Charisma', vantage='Advantage', dc=15)
    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Charisma', vantage='Disadvantage', dc=10)
    assert(res is True or res is False)

    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Athletics', vantage='Normal', dc=5)
    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Athletics', vantage='Advantage', dc=15)
    assert(res is True or res is False)
    res = a1.check(ctx=ctx, skill='Athletics', vantage='Disadvantage', dc=10)
    assert(res is True or res is False)
